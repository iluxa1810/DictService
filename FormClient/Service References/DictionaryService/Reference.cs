//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FormClient.DictionaryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictionaryInfo", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class DictionaryInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.ActionEnum ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Category_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> Dictionary_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FriendlyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderLoginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.ActionEnum Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Category_id {
            get {
                return this.Category_idField;
            }
            set {
                if ((this.Category_idField.Equals(value) != true)) {
                    this.Category_idField = value;
                    this.RaisePropertyChanged("Category_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Dictionary_id {
            get {
                return this.Dictionary_idField;
            }
            set {
                if ((this.Dictionary_idField.Equals(value) != true)) {
                    this.Dictionary_idField = value;
                    this.RaisePropertyChanged("Dictionary_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FriendlyName {
            get {
                return this.FriendlyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendlyNameField, value) != true)) {
                    this.FriendlyNameField = value;
                    this.RaisePropertyChanged("FriendlyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderLogin {
            get {
                return this.SenderLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderLoginField, value) != true)) {
                    this.SenderLoginField = value;
                    this.RaisePropertyChanged("SenderLogin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionEnum", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Enums")]
    public enum ActionEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddDict = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DelDict = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditDict = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditLink = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditPermission = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictionaryDataPackage", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class DictionaryDataPackage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.CategoryData[] CategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.DictionaryData[] dictionaryDatasField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.CategoryData[] Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.DictionaryData[] dictionaryDatas {
            get {
                return this.dictionaryDatasField;
            }
            set {
                if ((object.ReferenceEquals(this.dictionaryDatasField, value) != true)) {
                    this.dictionaryDatasField = value;
                    this.RaisePropertyChanged("dictionaryDatas");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryData", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class CategoryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Category_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Category_id {
            get {
                return this.Category_idField;
            }
            set {
                if ((this.Category_idField.Equals(value) != true)) {
                    this.Category_idField = value;
                    this.RaisePropertyChanged("Category_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictionaryData", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class DictionaryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Category_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Dictionary_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FriendlyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.DictionaryStateEnum StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Category_id {
            get {
                return this.Category_idField;
            }
            set {
                if ((this.Category_idField.Equals(value) != true)) {
                    this.Category_idField = value;
                    this.RaisePropertyChanged("Category_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Dictionary_id {
            get {
                return this.Dictionary_idField;
            }
            set {
                if ((this.Dictionary_idField.Equals(value) != true)) {
                    this.Dictionary_idField = value;
                    this.RaisePropertyChanged("Dictionary_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FriendlyName {
            get {
                return this.FriendlyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendlyNameField, value) != true)) {
                    this.FriendlyNameField = value;
                    this.RaisePropertyChanged("FriendlyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.DictionaryStateEnum State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictionaryStateEnum", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Enums")]
    public enum DictionaryStateEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Available = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Locked = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Refreshing = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictionaryProjectPackage", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class DictionaryProjectPackage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.OctopusServerData[] OctopusServerssDatasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.ProjectData[] ProjectDatasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.TaskData[] TaskDatasField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.OctopusServerData[] OctopusServerssDatas {
            get {
                return this.OctopusServerssDatasField;
            }
            set {
                if ((object.ReferenceEquals(this.OctopusServerssDatasField, value) != true)) {
                    this.OctopusServerssDatasField = value;
                    this.RaisePropertyChanged("OctopusServerssDatas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.ProjectData[] ProjectDatas {
            get {
                return this.ProjectDatasField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectDatasField, value) != true)) {
                    this.ProjectDatasField = value;
                    this.RaisePropertyChanged("ProjectDatas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.TaskData[] TaskDatas {
            get {
                return this.TaskDatasField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskDatasField, value) != true)) {
                    this.TaskDatasField = value;
                    this.RaisePropertyChanged("TaskDatas");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OctopusServerData", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class OctopusServerData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Server_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Server_id {
            get {
                return this.Server_idField;
            }
            set {
                if ((this.Server_idField.Equals(value) != true)) {
                    this.Server_idField = value;
                    this.RaisePropertyChanged("Server_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectData", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class ProjectData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Project_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Server_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Project_id {
            get {
                return this.Project_idField;
            }
            set {
                if ((this.Project_idField.Equals(value) != true)) {
                    this.Project_idField = value;
                    this.RaisePropertyChanged("Project_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Server_id {
            get {
                return this.Server_idField;
            }
            set {
                if ((this.Server_idField.Equals(value) != true)) {
                    this.Server_idField = value;
                    this.RaisePropertyChanged("Server_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskData", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class TaskData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Project_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Server_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.TaskStateEnum StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Task_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Project_id {
            get {
                return this.Project_idField;
            }
            set {
                if ((this.Project_idField.Equals(value) != true)) {
                    this.Project_idField = value;
                    this.RaisePropertyChanged("Project_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Server_id {
            get {
                return this.Server_idField;
            }
            set {
                if ((this.Server_idField.Equals(value) != true)) {
                    this.Server_idField = value;
                    this.RaisePropertyChanged("Server_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.TaskStateEnum State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Task_id {
            get {
                return this.Task_idField;
            }
            set {
                if ((this.Task_idField.Equals(value) != true)) {
                    this.Task_idField = value;
                    this.RaisePropertyChanged("Task_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskStateEnum", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Enums")]
    public enum TaskStateEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Available = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Locked = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictionaryOnTaskPackage", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class DictionaryOnTaskPackage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.CategoryData[] CategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.DictionaryOnTaskData[] DictionaryOnTaskDatasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FormClient.DictionaryService.DictionaryData[] dictionaryDatasField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.CategoryData[] Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.DictionaryOnTaskData[] DictionaryOnTaskDatas {
            get {
                return this.DictionaryOnTaskDatasField;
            }
            set {
                if ((object.ReferenceEquals(this.DictionaryOnTaskDatasField, value) != true)) {
                    this.DictionaryOnTaskDatasField = value;
                    this.RaisePropertyChanged("DictionaryOnTaskDatas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FormClient.DictionaryService.DictionaryData[] dictionaryDatas {
            get {
                return this.dictionaryDatasField;
            }
            set {
                if ((object.ReferenceEquals(this.dictionaryDatasField, value) != true)) {
                    this.dictionaryDatasField = value;
                    this.RaisePropertyChanged("dictionaryDatas");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictionaryOnTaskData", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class DictionaryOnTaskData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DictionaryOnTask_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Dictionary_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DictionaryOnTask_id {
            get {
                return this.DictionaryOnTask_idField;
            }
            set {
                if ((this.DictionaryOnTask_idField.Equals(value) != true)) {
                    this.DictionaryOnTask_idField = value;
                    this.RaisePropertyChanged("DictionaryOnTask_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Dictionary_id {
            get {
                return this.Dictionary_idField;
            }
            set {
                if ((this.Dictionary_idField.Equals(value) != true)) {
                    this.Dictionary_idField = value;
                    this.RaisePropertyChanged("Dictionary_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DictionaryService.IFileUpload")]
    public interface IFileUpload {
        
        // CODEGEN: Generating message contract since the wrapper name (UploadRequest) of message UploadRequest does not match the default value (Upload)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUpload/Upload", ReplyAction="http://tempuri.org/IFileUpload/UploadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Exception), Action="http://tempuri.org/IFileUpload/UploadExceptionFault", Name="Exception", Namespace="http://schemas.datacontract.org/2004/07/System")]
        FormClient.DictionaryService.UploadResponse Upload(FormClient.DictionaryService.UploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUpload/Upload", ReplyAction="http://tempuri.org/IFileUpload/UploadResponse")]
        System.Threading.Tasks.Task<FormClient.DictionaryService.UploadResponse> UploadAsync(FormClient.DictionaryService.UploadRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public FormClient.DictionaryService.DictionaryInfo DictInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream Stream;
        
        public UploadRequest() {
        }
        
        public UploadRequest(FormClient.DictionaryService.DictionaryInfo DictInfo, System.IO.Stream Stream) {
            this.DictInfo = DictInfo;
            this.Stream = Stream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool UploadSucceeded;
        
        public UploadResponse() {
        }
        
        public UploadResponse(bool UploadSucceeded) {
            this.UploadSucceeded = UploadSucceeded;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileUploadChannel : FormClient.DictionaryService.IFileUpload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadClient : System.ServiceModel.ClientBase<FormClient.DictionaryService.IFileUpload>, FormClient.DictionaryService.IFileUpload {
        
        public FileUploadClient() {
        }
        
        public FileUploadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileUploadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FormClient.DictionaryService.UploadResponse FormClient.DictionaryService.IFileUpload.Upload(FormClient.DictionaryService.UploadRequest request) {
            return base.Channel.Upload(request);
        }
        
        public bool Upload(FormClient.DictionaryService.DictionaryInfo DictInfo, System.IO.Stream Stream) {
            FormClient.DictionaryService.UploadRequest inValue = new FormClient.DictionaryService.UploadRequest();
            inValue.DictInfo = DictInfo;
            inValue.Stream = Stream;
            FormClient.DictionaryService.UploadResponse retVal = ((FormClient.DictionaryService.IFileUpload)(this)).Upload(inValue);
            return retVal.UploadSucceeded;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<FormClient.DictionaryService.UploadResponse> FormClient.DictionaryService.IFileUpload.UploadAsync(FormClient.DictionaryService.UploadRequest request) {
            return base.Channel.UploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<FormClient.DictionaryService.UploadResponse> UploadAsync(FormClient.DictionaryService.DictionaryInfo DictInfo, System.IO.Stream Stream) {
            FormClient.DictionaryService.UploadRequest inValue = new FormClient.DictionaryService.UploadRequest();
            inValue.DictInfo = DictInfo;
            inValue.Stream = Stream;
            return ((FormClient.DictionaryService.IFileUpload)(this)).UploadAsync(inValue);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DictionaryService.IFileDownload")]
    public interface IFileDownload {
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (Download)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileDownload/Download", ReplyAction="http://tempuri.org/IFileDownload/DownloadResponse")]
        FormClient.DictionaryService.DownloadResponse Download(FormClient.DictionaryService.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileDownload/Download", ReplyAction="http://tempuri.org/IFileDownload/DownloadResponse")]
        System.Threading.Tasks.Task<FormClient.DictionaryService.DownloadResponse> DownloadAsync(FormClient.DictionaryService.DownloadRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string SenderLogin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int Dictionary_id;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string SenderLogin, int Dictionary_id) {
            this.SenderLogin = SenderLogin;
            this.Dictionary_id = Dictionary_id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream stream;
        
        public DownloadResponse() {
        }
        
        public DownloadResponse(string FileName, System.IO.Stream stream) {
            this.FileName = FileName;
            this.stream = stream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileDownloadChannel : FormClient.DictionaryService.IFileDownload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileDownloadClient : System.ServiceModel.ClientBase<FormClient.DictionaryService.IFileDownload>, FormClient.DictionaryService.IFileDownload {
        
        public FileDownloadClient() {
        }
        
        public FileDownloadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileDownloadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileDownloadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileDownloadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FormClient.DictionaryService.DownloadResponse FormClient.DictionaryService.IFileDownload.Download(FormClient.DictionaryService.DownloadRequest request) {
            return base.Channel.Download(request);
        }
        
        public string Download(string SenderLogin, int Dictionary_id, out System.IO.Stream stream) {
            FormClient.DictionaryService.DownloadRequest inValue = new FormClient.DictionaryService.DownloadRequest();
            inValue.SenderLogin = SenderLogin;
            inValue.Dictionary_id = Dictionary_id;
            FormClient.DictionaryService.DownloadResponse retVal = ((FormClient.DictionaryService.IFileDownload)(this)).Download(inValue);
            stream = retVal.stream;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<FormClient.DictionaryService.DownloadResponse> FormClient.DictionaryService.IFileDownload.DownloadAsync(FormClient.DictionaryService.DownloadRequest request) {
            return base.Channel.DownloadAsync(request);
        }
        
        public System.Threading.Tasks.Task<FormClient.DictionaryService.DownloadResponse> DownloadAsync(string SenderLogin, int Dictionary_id) {
            FormClient.DictionaryService.DownloadRequest inValue = new FormClient.DictionaryService.DownloadRequest();
            inValue.SenderLogin = SenderLogin;
            inValue.Dictionary_id = Dictionary_id;
            return ((FormClient.DictionaryService.IFileDownload)(this)).DownloadAsync(inValue);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DictionaryService.IData")]
    public interface IData {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetDictionaryData", ReplyAction="http://tempuri.org/IData/GetDictionaryDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Exception), Action="http://tempuri.org/IData/GetDictionaryDataExceptionFault", Name="Exception", Namespace="http://schemas.datacontract.org/2004/07/System")]
        FormClient.DictionaryService.DictionaryDataPackage GetDictionaryData(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetDictionaryData", ReplyAction="http://tempuri.org/IData/GetDictionaryDataResponse")]
        System.Threading.Tasks.Task<FormClient.DictionaryService.DictionaryDataPackage> GetDictionaryDataAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetCategories", ReplyAction="http://tempuri.org/IData/GetCategoriesResponse")]
        FormClient.DictionaryService.CategoryData[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetCategories", ReplyAction="http://tempuri.org/IData/GetCategoriesResponse")]
        System.Threading.Tasks.Task<FormClient.DictionaryService.CategoryData[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/AddCategory", ReplyAction="http://tempuri.org/IData/AddCategoryResponse")]
        void AddCategory(string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/AddCategory", ReplyAction="http://tempuri.org/IData/AddCategoryResponse")]
        System.Threading.Tasks.Task AddCategoryAsync(string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/ChangeDictionaryStatus", ReplyAction="http://tempuri.org/IData/ChangeDictionaryStatusResponse")]
        void ChangeDictionaryStatus(int dictionary_id, FormClient.DictionaryService.DictionaryStateEnum state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/ChangeDictionaryStatus", ReplyAction="http://tempuri.org/IData/ChangeDictionaryStatusResponse")]
        System.Threading.Tasks.Task ChangeDictionaryStatusAsync(int dictionary_id, FormClient.DictionaryService.DictionaryStateEnum state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/ChangeDictionaryInfo", ReplyAction="http://tempuri.org/IData/ChangeDictionaryInfoResponse")]
        void ChangeDictionaryInfo(FormClient.DictionaryService.DictionaryData dictData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/ChangeDictionaryInfo", ReplyAction="http://tempuri.org/IData/ChangeDictionaryInfoResponse")]
        System.Threading.Tasks.Task ChangeDictionaryInfoAsync(FormClient.DictionaryService.DictionaryData dictData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetProjectsData", ReplyAction="http://tempuri.org/IData/GetProjectsDataResponse")]
        FormClient.DictionaryService.DictionaryProjectPackage GetProjectsData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetProjectsData", ReplyAction="http://tempuri.org/IData/GetProjectsDataResponse")]
        System.Threading.Tasks.Task<FormClient.DictionaryService.DictionaryProjectPackage> GetProjectsDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetXmlFormConfig", ReplyAction="http://tempuri.org/IData/GetXmlFormConfigResponse")]
        string GetXmlFormConfig(int server_id, int project_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetXmlFormConfig", ReplyAction="http://tempuri.org/IData/GetXmlFormConfigResponse")]
        System.Threading.Tasks.Task<string> GetXmlFormConfigAsync(int server_id, int project_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/UpdateXmlFormConfig", ReplyAction="http://tempuri.org/IData/UpdateXmlFormConfigResponse")]
        void UpdateXmlFormConfig(int server_id, int project_id, int task_id, string xmlConfig);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/UpdateXmlFormConfig", ReplyAction="http://tempuri.org/IData/UpdateXmlFormConfigResponse")]
        System.Threading.Tasks.Task UpdateXmlFormConfigAsync(int server_id, int project_id, int task_id, string xmlConfig);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetDictionariesOnTask", ReplyAction="http://tempuri.org/IData/GetDictionariesOnTaskResponse")]
        FormClient.DictionaryService.DictionaryOnTaskPackage GetDictionariesOnTask(int server_id, int project_id, int task_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IData/GetDictionariesOnTask", ReplyAction="http://tempuri.org/IData/GetDictionariesOnTaskResponse")]
        System.Threading.Tasks.Task<FormClient.DictionaryService.DictionaryOnTaskPackage> GetDictionariesOnTaskAsync(int server_id, int project_id, int task_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataChannel : FormClient.DictionaryService.IData, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataClient : System.ServiceModel.ClientBase<FormClient.DictionaryService.IData>, FormClient.DictionaryService.IData {
        
        public DataClient() {
        }
        
        public DataClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FormClient.DictionaryService.DictionaryDataPackage GetDictionaryData(string user) {
            return base.Channel.GetDictionaryData(user);
        }
        
        public System.Threading.Tasks.Task<FormClient.DictionaryService.DictionaryDataPackage> GetDictionaryDataAsync(string user) {
            return base.Channel.GetDictionaryDataAsync(user);
        }
        
        public FormClient.DictionaryService.CategoryData[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<FormClient.DictionaryService.CategoryData[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public void AddCategory(string name, string description) {
            base.Channel.AddCategory(name, description);
        }
        
        public System.Threading.Tasks.Task AddCategoryAsync(string name, string description) {
            return base.Channel.AddCategoryAsync(name, description);
        }
        
        public void ChangeDictionaryStatus(int dictionary_id, FormClient.DictionaryService.DictionaryStateEnum state) {
            base.Channel.ChangeDictionaryStatus(dictionary_id, state);
        }
        
        public System.Threading.Tasks.Task ChangeDictionaryStatusAsync(int dictionary_id, FormClient.DictionaryService.DictionaryStateEnum state) {
            return base.Channel.ChangeDictionaryStatusAsync(dictionary_id, state);
        }
        
        public void ChangeDictionaryInfo(FormClient.DictionaryService.DictionaryData dictData) {
            base.Channel.ChangeDictionaryInfo(dictData);
        }
        
        public System.Threading.Tasks.Task ChangeDictionaryInfoAsync(FormClient.DictionaryService.DictionaryData dictData) {
            return base.Channel.ChangeDictionaryInfoAsync(dictData);
        }
        
        public FormClient.DictionaryService.DictionaryProjectPackage GetProjectsData() {
            return base.Channel.GetProjectsData();
        }
        
        public System.Threading.Tasks.Task<FormClient.DictionaryService.DictionaryProjectPackage> GetProjectsDataAsync() {
            return base.Channel.GetProjectsDataAsync();
        }
        
        public string GetXmlFormConfig(int server_id, int project_id, int task_id) {
            return base.Channel.GetXmlFormConfig(server_id, project_id, task_id);
        }
        
        public System.Threading.Tasks.Task<string> GetXmlFormConfigAsync(int server_id, int project_id, int task_id) {
            return base.Channel.GetXmlFormConfigAsync(server_id, project_id, task_id);
        }
        
        public void UpdateXmlFormConfig(int server_id, int project_id, int task_id, string xmlConfig) {
            base.Channel.UpdateXmlFormConfig(server_id, project_id, task_id, xmlConfig);
        }
        
        public System.Threading.Tasks.Task UpdateXmlFormConfigAsync(int server_id, int project_id, int task_id, string xmlConfig) {
            return base.Channel.UpdateXmlFormConfigAsync(server_id, project_id, task_id, xmlConfig);
        }
        
        public FormClient.DictionaryService.DictionaryOnTaskPackage GetDictionariesOnTask(int server_id, int project_id, int task_id) {
            return base.Channel.GetDictionariesOnTask(server_id, project_id, task_id);
        }
        
        public System.Threading.Tasks.Task<FormClient.DictionaryService.DictionaryOnTaskPackage> GetDictionariesOnTaskAsync(int server_id, int project_id, int task_id) {
            return base.Channel.GetDictionariesOnTaskAsync(server_id, project_id, task_id);
        }
    }
}
