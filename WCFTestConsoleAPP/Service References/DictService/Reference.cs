//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFTestConsoleAPP.DictService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictionaryInfo", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class DictionaryInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTestConsoleAPP.DictService.ActionEnum ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Category_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Dictionary_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FriendlyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderLoginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTestConsoleAPP.DictService.ActionEnum Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Category_id {
            get {
                return this.Category_idField;
            }
            set {
                if ((this.Category_idField.Equals(value) != true)) {
                    this.Category_idField = value;
                    this.RaisePropertyChanged("Category_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Dictionary_id {
            get {
                return this.Dictionary_idField;
            }
            set {
                if ((this.Dictionary_idField.Equals(value) != true)) {
                    this.Dictionary_idField = value;
                    this.RaisePropertyChanged("Dictionary_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FriendlyName {
            get {
                return this.FriendlyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendlyNameField, value) != true)) {
                    this.FriendlyNameField = value;
                    this.RaisePropertyChanged("FriendlyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderLogin {
            get {
                return this.SenderLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderLoginField, value) != true)) {
                    this.SenderLoginField = value;
                    this.RaisePropertyChanged("SenderLogin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionEnum", Namespace="http://schemas.datacontract.org/2004/07/WCFConsoleServer.Enums")]
    public enum ActionEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddDict = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DelDict = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditDict = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditLink = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EditPermission = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DictService.IFileUpload")]
    public interface IFileUpload {
        
        // CODEGEN: Generating message contract since the wrapper name (UploadRequest) of message UploadRequest does not match the default value (Upload)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUpload/Upload", ReplyAction="http://tempuri.org/IFileUpload/UploadResponse")]
        WCFTestConsoleAPP.DictService.UploadResponse Upload(WCFTestConsoleAPP.DictService.UploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUpload/Upload", ReplyAction="http://tempuri.org/IFileUpload/UploadResponse")]
        System.Threading.Tasks.Task<WCFTestConsoleAPP.DictService.UploadResponse> UploadAsync(WCFTestConsoleAPP.DictService.UploadRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public WCFTestConsoleAPP.DictService.DictionaryInfo DictInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream Stream;
        
        public UploadRequest() {
        }
        
        public UploadRequest(WCFTestConsoleAPP.DictService.DictionaryInfo DictInfo, System.IO.Stream Stream) {
            this.DictInfo = DictInfo;
            this.Stream = Stream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool UploadSucceeded;
        
        public UploadResponse() {
        }
        
        public UploadResponse(bool UploadSucceeded) {
            this.UploadSucceeded = UploadSucceeded;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileUploadChannel : WCFTestConsoleAPP.DictService.IFileUpload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadClient : System.ServiceModel.ClientBase<WCFTestConsoleAPP.DictService.IFileUpload>, WCFTestConsoleAPP.DictService.IFileUpload {
        
        public FileUploadClient() {
        }
        
        public FileUploadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileUploadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WCFTestConsoleAPP.DictService.UploadResponse WCFTestConsoleAPP.DictService.IFileUpload.Upload(WCFTestConsoleAPP.DictService.UploadRequest request) {
            return base.Channel.Upload(request);
        }
        
        public bool Upload(WCFTestConsoleAPP.DictService.DictionaryInfo DictInfo, System.IO.Stream Stream) {
            WCFTestConsoleAPP.DictService.UploadRequest inValue = new WCFTestConsoleAPP.DictService.UploadRequest();
            inValue.DictInfo = DictInfo;
            inValue.Stream = Stream;
            WCFTestConsoleAPP.DictService.UploadResponse retVal = ((WCFTestConsoleAPP.DictService.IFileUpload)(this)).Upload(inValue);
            return retVal.UploadSucceeded;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WCFTestConsoleAPP.DictService.UploadResponse> WCFTestConsoleAPP.DictService.IFileUpload.UploadAsync(WCFTestConsoleAPP.DictService.UploadRequest request) {
            return base.Channel.UploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<WCFTestConsoleAPP.DictService.UploadResponse> UploadAsync(WCFTestConsoleAPP.DictService.DictionaryInfo DictInfo, System.IO.Stream Stream) {
            WCFTestConsoleAPP.DictService.UploadRequest inValue = new WCFTestConsoleAPP.DictService.UploadRequest();
            inValue.DictInfo = DictInfo;
            inValue.Stream = Stream;
            return ((WCFTestConsoleAPP.DictService.IFileUpload)(this)).UploadAsync(inValue);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DictService.IFileDownload")]
    public interface IFileDownload {
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (Download)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileDownload/Download", ReplyAction="http://tempuri.org/IFileDownload/DownloadResponse")]
        WCFTestConsoleAPP.DictService.DownloadResponse Download(WCFTestConsoleAPP.DictService.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileDownload/Download", ReplyAction="http://tempuri.org/IFileDownload/DownloadResponse")]
        System.Threading.Tasks.Task<WCFTestConsoleAPP.DictService.DownloadResponse> DownloadAsync(WCFTestConsoleAPP.DictService.DownloadRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string SenderLogin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int Dictionary_id;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string SenderLogin, int Dictionary_id) {
            this.SenderLogin = SenderLogin;
            this.Dictionary_id = Dictionary_id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream stream;
        
        public DownloadResponse() {
        }
        
        public DownloadResponse(string FileName, System.IO.Stream stream) {
            this.FileName = FileName;
            this.stream = stream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileDownloadChannel : WCFTestConsoleAPP.DictService.IFileDownload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileDownloadClient : System.ServiceModel.ClientBase<WCFTestConsoleAPP.DictService.IFileDownload>, WCFTestConsoleAPP.DictService.IFileDownload {
        
        public FileDownloadClient() {
        }
        
        public FileDownloadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileDownloadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileDownloadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileDownloadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WCFTestConsoleAPP.DictService.DownloadResponse WCFTestConsoleAPP.DictService.IFileDownload.Download(WCFTestConsoleAPP.DictService.DownloadRequest request) {
            return base.Channel.Download(request);
        }
        
        public string Download(string SenderLogin, int Dictionary_id, out System.IO.Stream stream) {
            WCFTestConsoleAPP.DictService.DownloadRequest inValue = new WCFTestConsoleAPP.DictService.DownloadRequest();
            inValue.SenderLogin = SenderLogin;
            inValue.Dictionary_id = Dictionary_id;
            WCFTestConsoleAPP.DictService.DownloadResponse retVal = ((WCFTestConsoleAPP.DictService.IFileDownload)(this)).Download(inValue);
            stream = retVal.stream;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WCFTestConsoleAPP.DictService.DownloadResponse> WCFTestConsoleAPP.DictService.IFileDownload.DownloadAsync(WCFTestConsoleAPP.DictService.DownloadRequest request) {
            return base.Channel.DownloadAsync(request);
        }
        
        public System.Threading.Tasks.Task<WCFTestConsoleAPP.DictService.DownloadResponse> DownloadAsync(string SenderLogin, int Dictionary_id) {
            WCFTestConsoleAPP.DictService.DownloadRequest inValue = new WCFTestConsoleAPP.DictService.DownloadRequest();
            inValue.SenderLogin = SenderLogin;
            inValue.Dictionary_id = Dictionary_id;
            return ((WCFTestConsoleAPP.DictService.IFileDownload)(this)).DownloadAsync(inValue);
        }
    }
}
